<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mobile Legends Counters</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: #ffcc00;
            text-shadow: 0 0 10px rgba(255, 204, 0, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #a0a0a0;
        }
        
        .search-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }
        
        .search-box {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        #hero-search {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }
        
        #search-btn {
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            background: #ffcc00;
            color: #1a1a2e;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        #search-btn:hover {
            background: #ffd633;
            transform: translateY(-2px);
        }
        
        .hero-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .hero-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .hero-card:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-5px);
        }
        
        .hero-card img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
        }
        
        .hero-card span {
            font-size: 0.9rem;
            display: block;
        }
        
        .results-section {
            display: none;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }
        
        .hero-details {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .hero-details img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .hero-info h2 {
            font-size: 2rem;
            margin-bottom: 10px;
            color: #ffcc00;
        }
        
        .hero-info p {
            color: #a0a0a0;
        }
        
        .counters-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }
        
        @media (max-width: 768px) {
            .counters-container {
                grid-template-columns: 1fr;
            }
        }
        
        .counter-section, .ally-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 20px;
        }
        
        .counter-section h3, .ally-section h3 {
            margin-bottom: 15px;
            color: #ffcc00;
            font-size: 1.5rem;
        }
        
        .counter-list, .ally-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 15px;
        }
        
        .counter-item, .ally-item {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 10px;
            transition: all 0.3s ease;
        }
        
        .counter-item:hover, .ally-item:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .counter-item img, .ally-item img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 5px;
        }
        
        .counter-item span, .ally-item span {
            font-size: 0.8rem;
            display: block;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            color: #a0a0a0;
            font-size: 0.9rem;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }
        
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-left-color: #ffcc00;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Mobile Legends Counters</h1>
            <p class="subtitle">Encuentra los mejores counters y aliados para cada héroe</p>
        </header>
        
        <section class="search-section">
            <div class="search-box">
                <input type="text" id="hero-search" placeholder="Busca un héroe...">
                <button id="search-btn">Buscar</button>
            </div>
            
            <div class="hero-grid" id="hero-grid">
                <!-- Los héroes se cargarán aquí dinámicamente -->
            </div>
        </section>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Cargando información del héroe...</p>
        </div>
        
        <section class="results-section" id="results-section">
            <div class="hero-details">
                <img id="selected-hero-img" src="" alt="Hero Image">
                <div class="hero-info">
                    <h2 id="selected-hero-name">Nombre del Héroe</h2>
                    <p id="selected-hero-role">Rol del Héroe</p>
                </div>
            </div>
            
            <div class="counters-container">
                <div class="counter-section">
                    <h3>Mejores Counters</h3>
                    <div class="counter-list" id="counter-list">
                        <!-- Los counters se cargarán aquí dinámicamente -->
                    </div>
                </div>
                
                <div class="ally-section">
                    <h3>Mejores Aliados</h3>
                    <div class="ally-list" id="ally-list">
                        <!-- Los aliados se cargarán aquí dinámicamente -->
                    </div>
                </div>
            </div>
        </section>
        
        <footer>
            <p>Este sitio es completamente gratuito y no tiene costo alguno para los usuarios.</p>
            <p>Datos basados en estadísticas de juego de la comunidad de Mobile Legends.</p>
        </footer>
    </div>

    <script>
        // Base de datos simulada de héroes
        const heroesData = {
            "Alucard": {
                name: "Alucard",
                role: "Fighter/Assassin",
                counters: ["Khufra", "Akai", "Eudora"],
                allies: ["Rafaela", "Angela", "Diggie"],
                image: "https://via.placeholder.com/120x120?text=Alucard"
            },
            "Miya": {
                name: "Miya",
                role: "Marksman",
                counters: ["Saber", "Lancelot", "Hayabusa"],
                allies: ["Tigreal", "Minotaur", "Rafaela"],
                image: "https://via.placeholder.com/120x120?text=Miya"
            },
            "Eudora": {
                name: "Eudora",
                role: "Mage",
                counters: ["Lancelot", "Fanny", "Gusion"],
                allies: ["Tigreal", "Atlas", "Khufra"],
                image: "https://via.placeholder.com/120x120?text=Eudora"
            },
            "Tigreal": {
                name: "Tigreal",
                role: "Tank",
                counters: ["Karrie", "Lunox", "Claude"],
                allies: ["Eudora", "Odette", "Miya"],
                image: "https://via.placeholder.com/120x120?text=Tigreal"
            },
            "Layla": {
                name: "Layla",
                role: "Marksman",
                counters: ["Saber", "Natalia", "Hayabusa"],
                allies: ["Tigreal", "Lolita", "Gatotkaca"],
                image: "https://via.placeholder.com/120x120?text=Layla"
            }
        };

        // Función para inicializar la cuadrícula de héroes
        function initializeHeroGrid() {
            const heroGrid = document.getElementById('hero-grid');
            
            for (const heroName in heroesData) {
                const hero = heroesData[heroName];
                
                const heroCard = document.createElement('div');
                heroCard.className = 'hero-card';
                heroCard.innerHTML = `
                    <img src="${hero.image}" alt="${hero.name}">
                    <span>${hero.name}</span>
                `;
                
                heroCard.addEventListener('click', () => {
                    showHeroDetails(hero);
                });
                
                heroGrid.appendChild(heroCard);
            }
        }

        // Función para mostrar los detalles del héroe
        function showHeroDetails(hero) {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('results-section').style.display = 'none';
            
            // Simular carga de datos
            setTimeout(() => {
                document.getElementById('selected-hero-img').src = hero.image;
                document.getElementById('selected-hero-name').textContent = hero.name;
                document.getElementById('selected-hero-role').textContent = hero.role;
                
                // Cargar counters
                const counterList = document.getElementById('counter-list');
                counterList.innerHTML = '';
                
                hero.counters.forEach(counterName => {
                    const counter = heroesData[counterName];
                    if (counter) {
                        const counterItem = document.createElement('div');
                        counterItem.className = 'counter-item';
                        counterItem.innerHTML = `
                            <img src="${counter.image}" alt="${counter.name}">
                            <span>${counter.name}</span>
                        `;
                        counterList.appendChild(counterItem);
                    }
                });
                
                // Cargar aliados
                const allyList = document.getElementById('ally-list');
                allyList.innerHTML = '';
                
                hero.allies.forEach(allyName => {
                    const ally = heroesData[allyName];
                    if (ally) {
                        const allyItem = document.createElement('div');
                        allyItem.className = 'ally-item';
                        allyItem.innerHTML = `
                            <img src="${ally.image}" alt="${ally.name}">
                            <span>${ally.name}</span>
                        `;
                        allyList.appendChild(allyItem);
                    }
                });
                
                document.getElementById('loading').style.display = 'none';
                document.getElementById('results-section').style.display = 'block';
            }, 800);
        }

        // Función de búsqueda
        function setupSearch() {
            const searchInput = document.getElementById('hero-search');
            const searchBtn = document.getElementById('search-btn');
            
            searchBtn.addEventListener('click', () => {
                const searchTerm = searchInput.value.trim().toLowerCase();
                
                if (searchTerm === '') return;
                
                // Buscar el héroe
                let foundHero = null;
                for (const heroName in heroesData) {
                    if (heroName.toLowerCase().includes(searchTerm)) {
                        foundHero = heroesData[heroName];
                        break;
                    }
                }
                
                if (foundHero) {
                    showHeroDetails(foundHero);
                } else {
                    alert('Héroe no encontrado. Intenta con otro nombre.');
                }
            });
            
            // Permitir búsqueda con Enter
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    searchBtn.click();
                }
            });
        }

        // Inicializar la aplicación
        document.addEventListener('DOMContentLoaded', () => {
            initializeHeroGrid();
            setupSearch();
        });
    </script>
</body>
</html>
